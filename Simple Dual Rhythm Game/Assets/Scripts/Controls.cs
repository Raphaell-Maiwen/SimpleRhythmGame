//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Arrows"",
            ""id"": ""17d02d40-6473-4e71-af1a-360d948d0789"",
            ""actions"": [
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""6880ce5a-52a9-42ef-9a09-c05bb917c01a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""d1c2cce5-ff0b-4207-9ed0-1732302c7846"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""77578df3-9698-4ad9-8822-a6ae5c46714b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""d0b8e4f2-14f2-4458-ab07-a8f4378ac7f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""S"",
                    ""type"": ""Button"",
                    ""id"": ""60c1417a-28a9-4106-a2bd-0211c174869a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""696d533a-0a6e-4849-b6b2-5c6891438989"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D"",
                    ""type"": ""Button"",
                    ""id"": ""f2c3f9dc-2acc-4cfe-afbe-159bc829e73e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""W"",
                    ""type"": ""Button"",
                    ""id"": ""8946f60c-f05f-485b-9e26-30d9c5c2e978"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""666f2d2b-4a4b-40eb-81d0-feca629ab941"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d77c3b6b-cb12-4b6b-901a-664013ee7c6a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d23f71b-4cd2-4e33-b78b-9b162ee9942c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f521a21d-23ae-48c7-9538-a724a07c4e57"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65d1e107-941a-4cd3-8232-cba73aa6758d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""S"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51819dd0-7782-47f2-bc0e-7f31c789da5d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9970b9a9-6b6d-4d4b-b6c0-b2dbaf8b2806"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec42f8d7-625c-425f-9ec5-9d8d031aee02"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""W"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Yo"",
            ""id"": ""c291d981-c6aa-4fa9-8059-3a0d64325eee"",
            ""actions"": [
                {
                    ""name"": ""Bouton"",
                    ""type"": ""Button"",
                    ""id"": ""830cd4d0-0deb-4483-a41a-09fcdf26502b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10a85121-4ace-44d3-ade3-91d0d3078429"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bouton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""id"": ""56ff9b38-4170-413f-ba3c-d97a702664e0"",
            ""actions"": [
                {
                    ""name"": ""South"",
                    ""type"": ""Button"",
                    ""id"": ""9e6f83f2-30f2-4dfb-a6c4-ded0b3c5ef9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""West"",
                    ""type"": ""Button"",
                    ""id"": ""830d6f0e-c88d-4995-9958-f7422e922eb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""East"",
                    ""type"": ""Button"",
                    ""id"": ""a1612863-b9c8-4823-910f-035f655045ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""North"",
                    ""type"": ""Button"",
                    ""id"": ""bed95bf6-bb41-4991-b9c0-693a19fedb88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""893992f7-98fa-4ab7-9585-281c3d5d2933"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""South"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fb207a2-3995-4e5b-9cb1-2250c3340d62"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""West"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e2f4e5e-7643-48d1-a5d9-14f686294311"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""East"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0898b02-0a4b-4a2b-992f-662b86ddaf23"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""North"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Arrows
        m_Arrows = asset.FindActionMap("Arrows", throwIfNotFound: true);
        m_Arrows_Down = m_Arrows.FindAction("Down", throwIfNotFound: true);
        m_Arrows_Left = m_Arrows.FindAction("Left", throwIfNotFound: true);
        m_Arrows_Right = m_Arrows.FindAction("Right", throwIfNotFound: true);
        m_Arrows_Up = m_Arrows.FindAction("Up", throwIfNotFound: true);
        m_Arrows_S = m_Arrows.FindAction("S", throwIfNotFound: true);
        m_Arrows_A = m_Arrows.FindAction("A", throwIfNotFound: true);
        m_Arrows_D = m_Arrows.FindAction("D", throwIfNotFound: true);
        m_Arrows_W = m_Arrows.FindAction("W", throwIfNotFound: true);
        // Yo
        m_Yo = asset.FindActionMap("Yo", throwIfNotFound: true);
        m_Yo_Bouton = m_Yo.FindAction("Bouton", throwIfNotFound: true);
        // Controller
        m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
        m_Controller_South = m_Controller.FindAction("South", throwIfNotFound: true);
        m_Controller_West = m_Controller.FindAction("West", throwIfNotFound: true);
        m_Controller_East = m_Controller.FindAction("East", throwIfNotFound: true);
        m_Controller_North = m_Controller.FindAction("North", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Arrows
    private readonly InputActionMap m_Arrows;
    private List<IArrowsActions> m_ArrowsActionsCallbackInterfaces = new List<IArrowsActions>();
    private readonly InputAction m_Arrows_Down;
    private readonly InputAction m_Arrows_Left;
    private readonly InputAction m_Arrows_Right;
    private readonly InputAction m_Arrows_Up;
    private readonly InputAction m_Arrows_S;
    private readonly InputAction m_Arrows_A;
    private readonly InputAction m_Arrows_D;
    private readonly InputAction m_Arrows_W;
    public struct ArrowsActions
    {
        private @Controls m_Wrapper;
        public ArrowsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Down => m_Wrapper.m_Arrows_Down;
        public InputAction @Left => m_Wrapper.m_Arrows_Left;
        public InputAction @Right => m_Wrapper.m_Arrows_Right;
        public InputAction @Up => m_Wrapper.m_Arrows_Up;
        public InputAction @S => m_Wrapper.m_Arrows_S;
        public InputAction @A => m_Wrapper.m_Arrows_A;
        public InputAction @D => m_Wrapper.m_Arrows_D;
        public InputAction @W => m_Wrapper.m_Arrows_W;
        public InputActionMap Get() { return m_Wrapper.m_Arrows; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ArrowsActions set) { return set.Get(); }
        public void AddCallbacks(IArrowsActions instance)
        {
            if (instance == null || m_Wrapper.m_ArrowsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ArrowsActionsCallbackInterfaces.Add(instance);
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @S.started += instance.OnS;
            @S.performed += instance.OnS;
            @S.canceled += instance.OnS;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @D.started += instance.OnD;
            @D.performed += instance.OnD;
            @D.canceled += instance.OnD;
            @W.started += instance.OnW;
            @W.performed += instance.OnW;
            @W.canceled += instance.OnW;
        }

        private void UnregisterCallbacks(IArrowsActions instance)
        {
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @S.started -= instance.OnS;
            @S.performed -= instance.OnS;
            @S.canceled -= instance.OnS;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @D.started -= instance.OnD;
            @D.performed -= instance.OnD;
            @D.canceled -= instance.OnD;
            @W.started -= instance.OnW;
            @W.performed -= instance.OnW;
            @W.canceled -= instance.OnW;
        }

        public void RemoveCallbacks(IArrowsActions instance)
        {
            if (m_Wrapper.m_ArrowsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IArrowsActions instance)
        {
            foreach (var item in m_Wrapper.m_ArrowsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ArrowsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ArrowsActions @Arrows => new ArrowsActions(this);

    // Yo
    private readonly InputActionMap m_Yo;
    private List<IYoActions> m_YoActionsCallbackInterfaces = new List<IYoActions>();
    private readonly InputAction m_Yo_Bouton;
    public struct YoActions
    {
        private @Controls m_Wrapper;
        public YoActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Bouton => m_Wrapper.m_Yo_Bouton;
        public InputActionMap Get() { return m_Wrapper.m_Yo; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(YoActions set) { return set.Get(); }
        public void AddCallbacks(IYoActions instance)
        {
            if (instance == null || m_Wrapper.m_YoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_YoActionsCallbackInterfaces.Add(instance);
            @Bouton.started += instance.OnBouton;
            @Bouton.performed += instance.OnBouton;
            @Bouton.canceled += instance.OnBouton;
        }

        private void UnregisterCallbacks(IYoActions instance)
        {
            @Bouton.started -= instance.OnBouton;
            @Bouton.performed -= instance.OnBouton;
            @Bouton.canceled -= instance.OnBouton;
        }

        public void RemoveCallbacks(IYoActions instance)
        {
            if (m_Wrapper.m_YoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IYoActions instance)
        {
            foreach (var item in m_Wrapper.m_YoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_YoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public YoActions @Yo => new YoActions(this);

    // Controller
    private readonly InputActionMap m_Controller;
    private List<IControllerActions> m_ControllerActionsCallbackInterfaces = new List<IControllerActions>();
    private readonly InputAction m_Controller_South;
    private readonly InputAction m_Controller_West;
    private readonly InputAction m_Controller_East;
    private readonly InputAction m_Controller_North;
    public struct ControllerActions
    {
        private @Controls m_Wrapper;
        public ControllerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @South => m_Wrapper.m_Controller_South;
        public InputAction @West => m_Wrapper.m_Controller_West;
        public InputAction @East => m_Wrapper.m_Controller_East;
        public InputAction @North => m_Wrapper.m_Controller_North;
        public InputActionMap Get() { return m_Wrapper.m_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
        public void AddCallbacks(IControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerActionsCallbackInterfaces.Add(instance);
            @South.started += instance.OnSouth;
            @South.performed += instance.OnSouth;
            @South.canceled += instance.OnSouth;
            @West.started += instance.OnWest;
            @West.performed += instance.OnWest;
            @West.canceled += instance.OnWest;
            @East.started += instance.OnEast;
            @East.performed += instance.OnEast;
            @East.canceled += instance.OnEast;
            @North.started += instance.OnNorth;
            @North.performed += instance.OnNorth;
            @North.canceled += instance.OnNorth;
        }

        private void UnregisterCallbacks(IControllerActions instance)
        {
            @South.started -= instance.OnSouth;
            @South.performed -= instance.OnSouth;
            @South.canceled -= instance.OnSouth;
            @West.started -= instance.OnWest;
            @West.performed -= instance.OnWest;
            @West.canceled -= instance.OnWest;
            @East.started -= instance.OnEast;
            @East.performed -= instance.OnEast;
            @East.canceled -= instance.OnEast;
            @North.started -= instance.OnNorth;
            @North.performed -= instance.OnNorth;
            @North.canceled -= instance.OnNorth;
        }

        public void RemoveCallbacks(IControllerActions instance)
        {
            if (m_Wrapper.m_ControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerActions @Controller => new ControllerActions(this);
    public interface IArrowsActions
    {
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnS(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnD(InputAction.CallbackContext context);
        void OnW(InputAction.CallbackContext context);
    }
    public interface IYoActions
    {
        void OnBouton(InputAction.CallbackContext context);
    }
    public interface IControllerActions
    {
        void OnSouth(InputAction.CallbackContext context);
        void OnWest(InputAction.CallbackContext context);
        void OnEast(InputAction.CallbackContext context);
        void OnNorth(InputAction.CallbackContext context);
    }
}
